# Do not copy the whole configuration, just specify what you need!
# see https://help.farbox.com/pygments.html
# for a list of supported color schemes, default scheme is "native"
options(radian.color_scheme = "native")

# either  `"emacs"` (default) or `"vi"`.
options(radian.editing_mode = "vi")

# indent continuation lines
# turn this off if you want to copy code without the extra indentation;
# but it leads to less elegant layout
options(radian.indent_lines = TRUE)

# auto match brackets and quotes
options(radian.auto_match = TRUE)

# disable the [prompt_toolkit](https://python-prompt-toolkit.readthedocs.io/en/master/index.html) [`auto_suggest` feature](https://python-prompt-toolkit.readthedocs.io/en/master/pages/asking_for_input.html#auto-suggestion)
options(radian.auto_suggest = FALSE)

# highlight matching bracket
options(radian.highlight_matching_bracket = TRUE)

# auto indentation for new line and curly braces
options(radian.auto_indentation = TRUE)
options(radian.tab_size = 4)

# pop up completion while typing
options(radian.complete_while_typing = TRUE)
# the minimum length of prefix to trigger auto completions
options(radian.completion_prefix_length = 2)
# timeout in seconds to cancel completion if it takes too long
# set it to 0 to disable it
options(radian.completion_timeout = 0.05)
# add spaces around equals in function argument completion
options(radian.completion_adding_spaces_around_equals = TRUE)

# automatically adjust R buffer size based on terminal width
options(radian.auto_width = TRUE)

# insert new line between prompts
options(radian.insert_new_line = FALSE)

# where the global history is stored, environmental variables will be expanded
# note that "~" is expanded to %USERPROFILE% or %HOME% in Windows
options(radian.global_history_file = "~/.radian_history")
# the filename that local history is stored, this file would be used instead of
# `radian.global_history_file` if it exists in the current working directory
options(radian.local_history_file = ".radian_history")
# when using history search (ctrl-r/ctrl-s in emacs mode), do not show duplicate results
options(radian.history_search_no_duplicates = TRUE)
# ignore case in history search
options(radian.history_search_ignore_case = FALSE)

# custom prompt for different modes
options(radian.prompt = "\033[38;5;33mR$\033[0m ")
options(radian.shell_prompt = "\033[0;31m#!$\033[0m ")
options(radian.browse_prompt = "\033[0;33mBrowse[{}]$\033[0m ")

# show vi mode state when radian.editing_mode is `vi`
options(radian.show_vi_mode_prompt = FALSE)
options(radian.vi_mode_prompt = "\033[0;34m[{}]\033[0m ")

# stderr color format
options(radian.stderr_format = "\033[0;31m{}\033[0m")

# force reticulate to use current python runtime
#options(radian.force_reticulate_python = FALSE)
# enable reticulate prompt and trigger `~`
#options(radian.enable_reticulate_prompt = TRUE)

# allows user defined shortcuts, these keys should be escaped when send through the terminal.
# In the following example, `esc` + `-` sends `<-` and `esc` + `m` sends `%>%`.
# Note that in some terminals, you could mark `alt` as `escape` so you could use `alt` + `-` instead.
#options(radian.escape_key_map = list(
#    list(key = "-", value = " <- "),
#    list(key = "m", value = " %>% ")
#))

# custom load hooks, to create vim keybinding
# https://github.com/randy3k/radian/issues/153
#
# keybindings for:
# regular R mode: app$session$modes$r$prompt_key_bindings
# all modes:      app$session$modes$r$key_bindings
# debug mode:     app$session$modes$browse$prompt_key_bindings
#
# You can use `names(<external_ptr>)` to see the list of exported attributes.
# For example `names(prompt_toolkit)`
#
options(radian.on_load_hooks = list(function() {
    getOption("rchitect.py_tools")$attach()

    radian <- import("radian")
    prompt_toolkit <- import("prompt_toolkit")

    KeyPress <- prompt_toolkit$key_binding$key_processor$KeyPress
    Keys <- prompt_toolkit$keys$Keys

    insert_mode <- radian$key_bindings$insert_mode
    app <- radian$get_app()
    app$session$app$timeoutlen <- 0.2

    kb <- app$session$modes$r$key_bindings

    kb$add("j", "k", filter = insert_mode)(function(event) {
        event$app$key_processor$feed(KeyPress(Keys$Escape))
    })
    kb$add(">", ">", filter = insert_mode)(function(event) {
        event$app$key_processor$feed(KeyPress("|"))
        event$app$key_processor$feed(KeyPress(">"))
        event$app$key_processor$feed(KeyPress(" "))
    })

    kb$add(Keys$Enter, Keys$Enter, filter = insert_mode)(function(event) {
        is_multiline <- event$app$current_buffer$multiline()
        if (is_multiline) {
            event$current_buffer$newline()
        }
    })
}))
